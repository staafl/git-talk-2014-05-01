Здравейте колеги,
добре дошли на семинара
"Разпределен сорс контрол с Git и Mercurial"
тире практическа магия
(изключете си скайп и торентите и си сложете юлифоните на вибрация)
Тук сме за да разберем какво е това разпределен сорс контрол, как се използва и какво може да направи за нас
Първо, кой съм аз и защо искам да ви говоря по тази тема
Казвам се Велко Николов и като повечето от вас съм софтуерен инженер
или поне това ми пише на СВ-то, истината е че нас ни наричат софтуерни инженери
или програмисти или компютърни специалисти или каквото е там
но всъщност ние сме магьосници
пишем заклинания и караме да се случват магически неща
лично аз много се вдъхновявам от нашата професия и искам да съм колкото се може по-добър в нея
още когато започнах да се занимавам с тези неща, преди 6 години, разбрах от по-опитните магьосници от мен че това е едно от нещата които трябва да овладея за да стана наистина добър
и по-нататък преживяванията ми потвърдиха това
това е една от темите които просто трябва да се разбират
сорс контрол, тестове, естимиране, писане на документация, дизайн, качествен код, комуникация
за всяка 
та момента в който започнах да се образовам по темата 
усетих че почвам да се ъпгрейдвам
било ми е от голяма полза, а и изглежда добре
ако успея да споделя с вас някои от важните неща които научих с времето, и да ви науча да уважавате тематиката и да я използвате за ваша изгода, много ще се изкефя
по време на семинара ще видим причини поради които е толкова важна тема
но сега накратко, главните причини са две -
първо, дори и да си един човек, сорс контролът ти дава контрол
контрол върху това което правиш
позволява ти да имаш поглед върху това какво се случва, накъде отива проекта ти, да избираш какво да правиш сега
особено в системите с лесен бранчинг, като тези за които ще си говорим
веднъж научиш ли се да ползваш feature бранчове, просто все едно си в друг свят
второ, когато работим в екип, системата за сорс контрол позволява на екипа да е повече от сумата на съставните си части
...
Първо, каква е структурата на семинара:
две части от по грубо три часа
в първата част ще говорим общо за сорс контрола, ще се запознаем с Git и Mercurial и ще видим как се използват в ежедневната работа
на всеки час ще правим кратка почивка, колкото да си поемем дъх
около 13:30 до 14:30 ви оставям на мира за обяд, след което за тези които искат да навлязат по-дълбоко в нещата, ще отделим два или три часа за да видим някои от по-мощните им способности, да си поговорим за стратегии за организиране на проекти и ще надникнем зад кулисите на двете системи, за да видим как работят отвътре, как
нещата от втората половина не са задължителни да се знаят, но според мен си струва
лично на мен са ми били от голяма полза
ето структурата на презентацията
по всяко време се чувствайте свободни да вдигнете ръка и да питате ако имате въпроси

1x40 min
Представяне
Какво е сорс контрол?
Какво е разпределен сорс контрол?
Защо разпределен сорс контрол?
Git и Mercurial?
Общи положения за разпределения сорс контрол
1x40 min
Git
1x40 min
Mercurial
1x40 min


Така, представяне
Както казах, аз съм Велко Николов, за тези с които не се познаваме
velko.nikolov@gmail.com
Работя в Tick42, занимаваме се със софтуер за банки, борси и фондове
И ако има добри C# програмисти които си търсят работа с готини колеги, добри пари и умерено ниво на стрес, можете да ми метнете CV

Какво е сорс контрол?
Сорс контрол, известен също като version control и revision control 
е система която проследява развитието на някакви данни във времето
version control-ът не е само в софтуерния инженеринг, ползва се тук таме от инженери, архитекти, дизайнери, юристи, и т.н., както и от отделни хора които са наясно с ползите
примерно аз в университета си пазих курсовите работи в SVN
идеята е че когато имаш някакви ценни данни, например сорс или чертежи или документи, искаш да имаш контрол върху какво се случва с тях
ако в даден момент от времето се появи грешка, искаш да можеш да възстановиш нещата както са били преди това
или може би ти трябва да видиш какви промени са правени в набор документи февруари до април миналата година
или да видиш кой колега къде е пипал, например за да знаеш кого да питаш за обяснение когато нещо не разбираш
или да дадеш на нов сътрудник историята на проекта за да може по-лесно да се ориентира
или да ограничиш промените върху даден файл или бранч само до дадена група сътрудници
или да сравниш стабилната версия на сорса си с новия release candidate, например ако ще правите code review-та
и така нататък, дори на пръв поглед ползите са много, а с еволюцията на системите са се появили все повече и повече полезни неща които могат да се правят
освен че ни дадоха бранчинг, новите разпределени системи улесняват значително разработването на open source проекти без географски и времеви ограничения 
естествено в софтуера тези системи са най-застъпени, всяка фирма която не са пълни кретени използват някакъв вид сорс контрол
първо понеже спецификата на работата ни е такава че е от критично значение да имаме контрол върху съдържанието на сорса ни
един чифт скоби може да обърне всичко с краката нагоре
един поучителен пример е прочутия goto fail бъг в епълската имплементация на ssl
където поради един дублиран ред, SSL сигурността им е била пробита като решето
можете да видите кода в онлайн интерфейса към SVN-а им, и според лога на системата, тази промяна е била направена на 31 декември
в случая поне знаят кого да уволнят
и второ понеже нашите системи са най-съвършени
защото си ги пишем ние за нашите собствени нужди
и понеже сме перфекционисти сме стигнали до страшно добри решения като тези за които ще си говорим сега
...
относно системите, нямаме време да минаваме през историята, но ето една класификация която отмъкнах от чужда презентация
игнорирайте за момента категориите най-вляво, те се отнасят до начина на пазене на данни

от функционална гледна точка, най-важните разлики между системите за сорс контрол са свързани с моделът на колабориране между отделните хора
или по-точно отделните checkout-и
на най-базово ниво всички сорс контрол системи си приличат по това че потребителят има "работна папка"/дърво, което са файловете с които работите и папка с метаданни, където е информацията която се използва от сорс контрол системата докато работиш
също така имаме концепцията за "repo"
това е мястото на което се пази цялостна информация за проекта
историята на проекта, настройки за достъп, такива работи
каква точно информация се пази в папката с метаданни зависи от точната система
централизираните системи обикновено пазят само последната версия на файловете за да можете лесно да сравните какво сте направили и да си върнете промените
това е т.нар. base в SVN
разпределените пазят всичко, при тях репото и мета-папката са на практика едно и също
та, разликата между локални, централизирани и разпределени е че ако имаме няколко checkout-а, примерно на няколко колеги, как се сътрудничи между тях
при най-старите системи, "local", нямаме такава опция
ти си имаш папката с проекта, променяш там, комитваш, и никой не може да ти помага
ако искаш да си дадеш проекта на някой друг, трябва да му дадеш направо папката с файловете
и ако той направи промени, няма лесен начин да си ги вкараш обратно в репото си и в историята си
това е първата фаза на развитието на нещата, от преди много от нас да се родят
(няколко думи за rcs)
следващото стъпало на еволюцията са централизираните системи, които позволяват ongoing сътрудничество между група от хора
репото е само едно и централно
всеки взима файловете оттам, прави-струва и комитва промените обратно в него
най-известните са CVS, която вече е тотално obsolete, SVN, която я замести, и се надявам също да си замине в следващите 10 години, TFS и Perforce
лично аз съм ползвал SVN и TFS, а за Perforce съм чувал хубави неща
моето мнение е че вече им мина времето на този тип системи
работят, може да се върши работа с тях, но самата им архитектурата ги спъва много
научи ли се на гъвкава работа с разпределена система, връщането назад е доста неприятно, все едно ми слагат примка на врата
наскоро ми се наложи да работя с едни клиенти по проект който се пази в SVN
беше мъчение
и загубих данни, нещо което с Git и Hg никога не ми се е случвало
т.е. загубих промените които бях направил в един файл, защото не бях готов да комитвам и не можех както в git да си направя локален комит
както и да е, ще си говорим повече за разликите между централизираните и разпределените системи след малко
първо да маркираме за разпределените
* слайд
разпределените/дистрибутирани системи са по-млади
прохождат може би началото на този век
при тях идеята е че всеки участник в проекта държи свое репо с пълната история, минус евентуално току-що направени промени от някой друг
вместо да имаме централен сървър през който да става всичко, всеки дев е самостоятелен и решава точно какво да направи с промените си, на кого да ги дава, дали изобщо да ги публикува
което понякога е огромно предимство
най-известните към момента са Git и Mercurial, като Git е по-популярен, но и Mercurial има доста почитатели
Darcs и Bazaar също се ползват, всичко друго е по-скоро екзотично
набързо, това вляво се отнася до начина по който се пази самото съдържание в сорс контрол системата
"delta storage" значи че когато се пази историята на файл, се пазят само разликите
един вид, всеки файл представлява поток от промени които се наслагват една върху друга за да се получи финалния вариант
"DAG" значи че се пази целия файл в новия му вид
всяка ревизия преставлява дърво от файлове и папки като нямаме концепцията за поток от промени
това е първата разлика между Git и Mercurial, но не е толкова важна
първото заема по-малко място ако се правят малки промени, но и в DAG варианта има възможност за пестене
освен това поне Git има прозрачен "слой" така да се каже в дъното който преобръща от едното в другото
т.е. самата система винаги вижда цели файлове, но на диска могат да се пазят като делти
има доста по-важни разлики между двете, това не е основополагащо
по-важната разлика е в концептуалния модел, например при мърджването е полезно да се има предвид че се работи с цели файлове, не с делти, когато се опитваш да осмислиш какво става
така, преди да почнем да си говорим за самите Git и Mercurial, няколко думи за разпределения сорс контрол и защо смятам че е предимство, а и доста по-умни от мен хора също смятат
това че не си вързан към централно репо ти дава огромна гъвкавост в сравнение с централизираните системи
най-елементарния пример, нямаш нужда от връзка със сървъра за да работиш
можеш да си ползваш сорс контрола навсякъде, със или без мрежа
можеш да си някъде, може да ти спре нета, самият сървър може да падне, може да му гръмне харда, не само че няма да ти попречи на работата, ами имаш готов бакъп на локалната си машина
и всеки от колегите ти също, заедно с цялата история
второ, операциите са много по-бързи когато си имаш данните при себе си
много по-бързи, докато SVN например за всяка операция трябва да ходи до сървъра и да се обясняват и да източи данните за да ти ги покаже, Mercurial ти ги дава веднага щом натиснеш enter
което според някои е и недостатък, вече не може да пуснеш да се комитват 300 файла и да отидеш да играеш билярд
но е доста приятно да не трябва да чакаш когато си по средата на нещо
трето и най-важното, позволява ти да си структурираш екип и проекта по разни готини начини за които ще си говорим подробно накрая на семинара
четвърто и най-най-важното, да, още по-важно от най-важното, възможността да си комитваш локално и след това да си променяш мнението и да си изтриваш комитите или да ги ги променяш преди да ги публикуваш
т.е. запазването на промени и публикуването са по дефиниция разделени
което е безценно за тези от нас които не са непогрешими и понякога отпосле им идва акъла
оттук нататък си говорим само за разпределени системи.

Git и Mercurial в момента са най-популярните DVCs в световен мащаб, и специално Git е гръбнака на open source development-а, до немалка степен благодарение на сайтове като Github, Bitbucket, Google Code и други
и двете се зараждат покрай разработката на линукс кернела, който до един момент е използвал друга система, BitKeeper, но поради търкания със собствениците и, Линус и компания търсят заместител и в крайна сметка решават да напишат свое решение. В резултат се появяват два проекта, Git (the stupid content tracker), и Mercurial (известен още като Hg, химичния знак на живака). И двете системи дебютират през април 2005, а към днешна дата и двете имат сходни възможности, но originally са с различна философия, а и Git е писан от самия Линус, което е причината да се наложи като доминиращата DVCs, а Hg да остане по-скоро за ценители.
Колкото до философията им, Hg определено от началото е залагаше на леснота за употреба и пазене на потребителя от проблеми, докато Git беше по-скоро прагматично решение, което ти позволява да бъркаш навсякъде и ако не внимаваш да си отрежеш крака. Но с времето двете системи еволюираха доста успешно и сега Git е по-лесен за употреба и има по-добра документация (markov chain man generator), а пък Mercurial позволява да се правят повече работи, макар и с предпазители - трябва изрично да си включиш опасната функционалност.
Друг важен проблем беше Windows поддръжката, в началото Hg имаше огромна преднина, но според мен в момента нещата са доста изравнени. Поне аз не усещам особена разлика.

Няколко думи за практическата употреба и ще преминем към практиката.

Историята на един проект под сорс контрол представлява поредица от комити, като комит може да се разглежда като запазена точка от времето - checkpoint, save game, system restore point - това е брънка от историята която има някакво описание и към която винаги можеш да се върнеш, спрямо която можеш да сравняваш, и т.н.
Това е базовия обект с който се работи.
(слайд)
Един комит има данни, които в delta случая представляват делтите на отделните файлове - например в Hg, а в DAG случая е данните от цялото работно дърво. Преди да ахнете че това е много скъпо, в Git-ските комити се пази само хеша на файловете, а самите файлове се пазят в storage-а. Така че ако имаш само един променен файл, с комита ти ще се създаде само един файл на диска.
Освен данните, имаме и дата и час на създаването, име на автора, описание - което е много важно, указател към предишния комит - за това ще си говорим след минута, и евентуално други метаданни които VCS-то ти е сложило, примерно Hg слага името на бранча в който е направен комита, което мисля че е добра идея, ще видим начин как да се случи същото и в Git. Когато направиш комит, и в двете системи получаваш id с което се идентифицира и може да се назовава с него.
Всеки път когато правиш комит можеш да го публикуваш, може да правиш промени в работното си дърво, можеш да се отказваш от промените, можеш да направиш от промените си нов комит който да следва предишния, но самия комит не можеш да го промениш. Не можеш да промениш данните в него, описанието, нищо. Можеш най-много да го изхвърлиш ако решиш че е бил лоша идея, поне в разпределените системи можеш, стига вече да не си го публикувал. Накратко комитите са immutable.
Всякакви операции и в Git и в Hg, които се използват за да моделират история, не променят самите комити а им създават копия с необходимите разликите - и с различен хеш. 
Както споменах, комитът си има id, което и в Mercurial и Git е SHA1 хеш на съдържанието им, което е и част от причината да са immutable. Освен това комитите имат и указател към родителят (или родителите) си, който е id-то на предишният комит след който идват. Този указател също е част от комита, така че не можеш да вземеш един комит и да го закачиш на друго място - можеш да му направиш копие и да изхвърлиш предишния. Разликата е тънка но съществена.
Та комитът си знае родителят - или родителите, когато става дума за merge комит. Неговият родител също знае своя, и така нататък до първия комит в историята който няма родител. 
Това се нарича history graph на репото, и в общия случай не е една права линия, а се разклонява на някои места, които наричаме бранчове. За тях има да си говорим но накратко, това са местата на които работа започва да протича успоредно. Може да става дума за отделни хора които работят върху проекта едновременно или за различни потоци на разработка - примерно различни фиичъри на проекта които могат да се разработват паралелно и в даден момент да се обединят. Този момент се нарича merge, а комитът в който се случва е т.нар. merge commit.
Така че графът прилича на дърво, само че на някои места клоните се събират. Техническия термин за тази структура е DAG, същия DAG за който говорихме когато обсъждахме различните начини за пазене на информация. Съкращението е "directed acyclic graph", т.е. насочен граф без цикли. Както виждате, тук всички стрелки сочат горе-долу в една посока - назад във времето, и нямаме цикли. Впрочем, когато говорим за историята от тази гледна точка, обикновено и казваме "дърво" или "граф", не се изсилваме да конкретизираме че всъщност е даг.
На концептуално ниво това е историята във всяка една source control система. Интересното в разпределените системи е че не е задължително цялото дърво да присъства в едно репо. Ако с Пешо работите по някакъв проект в GitHub, вие имате едно общо репо в което си качвате работата, и всеки си има локално репо в което работи. Вие можете да си правите някакви експерименти локално, да правите комити, но докато не ги публикувате в междинното репо, те са си само при вас. Можете да ги изхвърлите, да ги публикувате някъде другаде, а ако разбирате от системата с която работите, можете и да ги модифицирате по някакъв начин така че да са по като за пред хора. Ест. отново повтарям че не става дума за модифициране, можете да създадете други комити базирани на тези, и да публикувате тях. Ще видим как става това по-нататък. Когато Пешо дръпне новите промени от GitHub, ще получи целия граф - но той междувременно може да има свои промени които да не е качил. Така че цялостният граф на историята е нещо абстрактно и за да получим цялата история която ни трябва, трябва по някакъв начин да си организираме репотата, за което ще говорим във втората част на семинара. В този случаи организацията е подобна на централизирана система - няколко на брой души, примерно вие и Пешо, работят и публикуват в централно репо, което вероятно е и официалното така да се каже състояние на проекта, и ако някой иска сорса за да си го билдне, или нов човек иска да се включи, вероятно ще го изтегли оттам.
Една бележка под линия, не е задължително DAG-ът да е само един, поне Git може да създава колкото си иска исторически потока, така че можете да пазите отделни проекти в едно репо. Но в повечето случаи е safe assumption че историята ви започва от една единствена точка.
Така, хайде да видим как стават нещата, първо под Git. Ще започнем от инсталацията.
Под Windows опциите са да кажем три, но като цяло ви трябва само една - msysgit, известен още като Git for Windows. Другите варианти са GitHub-ския клиент, който има някои благинки като интеграция с GitHub и готин powershell-ски терминал който ти дописва командите и ти показва в кой бранч си в момента и какво ти е състоянието на работната папка в промпта. Готин е но като цяло не виждам нещо кой-знае колко полезно, а подозирам че използва msysgit, затова винаги си инсталирам msysgit и дотам. Третата опция е да си инсталирате пакета от Cygwin, за тези които не знаят Cygwin е емулационна среда за компилиране - и след това пускане - на линукски приложения върху Windows. По време на инсталацията му или след това можете да изберете git като пакет който да се инсталира. Споменавам го само за пълнота но не мисля че на някого може да му потрябва освен ако нямате някакъв много специфичен сценарии.
Сега ще инсталираме msysgit.
(%PATH%, опции при инсталация...)
Интересна бележка под линия, понеже git идва от линукския свят където нещата зависят доста от command-line туловете, msysgit идва с windows-ки имплементации на много от любимите на всички линуксери програмки като grep, head, cat и т.н., така че ако папката ви е в пътя можете да си ги ползвате като пичове, и ако не се лъжа скоро ще ни се наложи.

* basic usage
така, след като сме инсталирали Git, можем да го ползваме. Една бележка, и Hg и Git ще ги гледаме главно през конзолата. За мен това е най-гъвкавия начин за използване, защото всички опции ги имаш подръка, освен това е лесна за скриптиране, и повечето информация в мрежата е за работа през конзолата, не за цъкане из разните GUI-та. Ест. има неща за които графичния интерфейс си е доста по-удобен, например при сравняване на файлове или разглеждане на графа на историята. Но според мен разбиращите ползватели са конзолно-центрични така да се каже.
Първото което трябва да направим е да видим дали отговаря. Ще работим с git.exe, което трябва да е в пътя ни, и за да го проверим отваряме един терминал и гледаме какво се случва когато го викнем:
...
Ако не се случи, или не сме добавили exe-то в пътя, или още windows не се е усетил, или нещо друго. За първото отваряме настройките и гледаме дали го има, за второто се разлогваме и влизаме отново. За третото какво правим?
Така, очевидно всичко е наред. Сега ни трябва съвсем малко конфигурация:

git config --global user.name "Velko Nikolov"
git config --global user.email velko.nikolov@gmail.com

Това са името и имейла които влизат като автор във всеки комит който направим.

* конфигурация, конфигурационни файлове

* git init
* git add
* git staging area
* git status
* git diff
* git diff --cached
* git commit
* git commit -m
* git log
* още няколко комита
* git commit -a
* git log
* git log --graph
* git log --pretty, git log --oneline, git log -p
* .gitignore
- ignore all binaries
- github's template
* git rm, git rm --cached
* какво става в папката .git
- objects
- refs
- index
- hooks
- logs - reflog
- head
- config
* правене на репо в GitHub
* git remote add
* git remote push
* какво са бранчовете и remote branches
* git rm
* git add -i
* оправяне на проблеми
- git commit --amend
- git checkout -- file
- git checkout .
- git checkout <rev>
- git reset --hard
- git reset --mixed
- git rebase -i
* push-ване
* pull-ване
* clone-ване
* branch-ване и merge-ване
- каква е идеята
- концептуалният модел на git
- demo с 
- feature branch-ове
- за архитектура на бранчове ще си говорим втората част от семинара
- тракинг-бранчове
* merge-ване
- git log --graph
- automatic merge algorithms - 3-way merge etc
- git merge
- конфликти
- resolving
- git checkout --theirs
- git checkout --ours
- git add
- git rm
- git merge --abort
- rebase
- промяната на един комит променя всичките му деца, може да се получи дубликация на история
- голям проблем особено ако тръгнат да се merge-ват нещата
- dreaded rewriting public history problem - cascades through everyone
- mercurial има специална защита срещу такива неща, т.нар. phases
* refs
- heads, branches, remotes

* ресурси
- Pro Git
- #git @ irc.freenode.net
- man pages
- stackoverflow
- visual guide to git
- cheatsheet at http://www.ndpsoftware.com/git-cheatsheet.html
- a visual git reference

* tools
- gitextensions
- tortoisegit
- VS integration
